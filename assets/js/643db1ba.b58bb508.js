"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[212],{5294:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var t=n(4848),o=n(8453);const a={title:"9618_s23_qp_41 (2023 May 41)",sidebar_label:"9618_s23_qp_41"},i=void 0,s={id:"s23_qp_41/index",title:"9618_s23_qp_41 (2023 May 41)",description:"Resources:",source:"@site/docs/9618_s23_qp_41/index.md",sourceDirName:"9618_s23_qp_41",slug:"/s23_qp_41/",permalink:"/Cambridge-A-Level-Computer-Science-9618-4/docs/s23_qp_41/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"9618_s23_qp_41 (2023 May 41)",sidebar_label:"9618_s23_qp_41"},sidebar:"tutorialSidebar",previous:{title:"9618_s22_qp_42",permalink:"/Cambridge-A-Level-Computer-Science-9618-4/docs/s22_qp_42/"},next:{title:"9618_s23_qp_42",permalink:"/Cambridge-A-Level-Computer-Science-9618-4/docs/s23_qp_42/"}},l={},u=[{value:"Question 1",id:"question-1",level:2},{value:"Question 2",id:"question-2",level:2},{value:"Question 3",id:"question-3",level:2}];function c(e){const r={a:"a",code:"code",h2:"h2",li:"li",pre:"pre",ul:"ul",...(0,o.R)(),...e.components},{Details:a}=r;return a||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:"Resources:"}),(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(7736).A+"",children:"Question Paper"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(9059).A+"",children:"Exam Resources"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsxs)(r.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(271).A+"",children:["My Answers ",(0,t.jsx)(r.code,{children:"(evidence.doc)"})]})}),"\n"]})]}),"\n",(0,t.jsx)(r.h2,{id:"question-1",children:"Question 1"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'\r\n# 1. A program reads data from a file and searches for specific data.\r\n# ---\r\n\r\n\r\n# (i) Write program code to declare the local array DataArray\r\n# ---\r\nDataArray = []\r\n\r\n\r\n# (ii) Amend the main program to read the contents of Data.txt into DataArray\r\n# ---\r\nwith open("Data.txt", "r", encoding=\'utf-8\') as _file:\r\n     for line in _file.readlines():\r\n        line = line.strip()\r\n        try:\r\n            DataArray.append(int(line))\r\n        except ValueError:\r\n            pass # not an int\r\n# print(DataArray)\r\n\r\n\r\n# (b) (i) The procedure PrintArray() takes an integer array as a parameter \r\n# and outputs the contents of the array in the order they are stored.\r\n# ---\r\ndef PrintArray(arr):\r\n    for i in arr:\r\n        print(i, end=" ")\r\n    print()\r\n# PrintArray(DataArray)\r\n\r\n# (ii) Amend the main program to output the contents of DataArray using the procedure PrintArray()\r\n# ---\r\nPrintArray(DataArray)\r\n\r\n# (c) The function LinearSearch():\r\n# \u2022 takes an integer array and integer search value as parameters\r\n# \u2022 counts and returns the number of times the search value is found in the array.\r\n# Write program code for the function LinearSearch()\r\n# ---\r\ndef LinearSearch(arr, val):\r\n    count = 0\r\n    for item in arr:\r\n        if val == item:\r\n            count += 1\r\n    return count\r\n\r\n\r\n# (d) (i) Amend the main program to:\r\n# \u2022 prompt the user to input a whole number between 0 and 100 inclusive\r\n# \u2022 read and validate the input from the user\r\n# \u2022 call LinearSearch() with DataArray and the validated input value\r\n# \u2022 output the result in the format:\r\n# The number 7 is found 2 times.\r\n# ---\r\nwhile True:\r\n    unum = input("Input a whole number [0-100]: ") \r\n    try:\r\n        if "." in unum:\r\n            raise ValueError # if a decimal number is enetered\r\n                             # eg: will also block inputs like 7.0\r\n        unum = int(unum)\r\n        if (unum >= 0) and (unum <= 100):\r\n            break # break out of loop if the user input is in range\r\n        else:\r\n            print(f"{unum} is not between 0-100. Please try again")\r\n    except (ValueError,TypeError):\r\n        print("Please input an integer")\r\ncount = LinearSearch(arr=DataArray, val=unum)\r\nprint(f"The number {unum} os found {count} times.")\r\n\r\n\r\n# (ii) Test your program by inputting the number 12.\r\n# Take a screenshot of the output.\r\n# ---\r\n# OUTPUT:\r\n# \r\n# 10 4 5 13 25 31 4 66 12 5 0 11 15 20 21 12 33 49 12 12 7 7 4 22 0 \r\n# Input a whole number [0-100]: 12\r\n# The number 12 os found 4 times.\r\n\r\n# 1+4+3+1+1+3+4+1 = 18 marks total\r\n\n'})}),"\n",(0,t.jsx)(r.h2,{id:"question-2",children:"Question 2"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'# (a) (i)\r\n# Write program code to declare the class Vehicle. All attributes must be private.\r\n# You only need to declare the class and its constructor. Do not declare any other methods.\r\n# Use your programming language\u2019s appropriate constructor.\r\n# If you are writing program code in Python, include attribute declarations using comments.\r\n# ---\r\nclass Vehicle:\r\n    def __init__(self, id, MaxSpeed, IncreaseAmount):\r\n        self._id = id\r\n        self._MaxSpeed = MaxSpeed\r\n        self._IncreaseAmount = IncreaseAmount\r\n        self._CurrentSpeed = 0\r\n        self._HorizontalPosition = 0\r\n    \r\n    # (ii) Write program code for the get methods GetCurrentSpeed(),GetIncreaseAmount(), GetMaxSpeed() and GetHorizontalPosition()\r\n    # ---\r\n    @property\r\n    def CurrentSpeed(self):\r\n        return self._CurrentSpeed\r\n\r\n    @property\r\n    def IncreaseAmount(self):\r\n        return self._IncreaseAmount\r\n      \r\n    @property\r\n    def MaxSpeed(self):\r\n        return self._MaxSpeed\r\n\r\n    @property\r\n    def HorizontalPosition(self):\r\n        return self._HorizontalPosition\r\n    \r\n    # (iii) Write program code for the set methods SetCurrentSpeed() and SetHorizontalPosition()\r\n    # ---\r\n    @CurrentSpeed.setter\r\n    def set_CurrentSpeed(self, value):\r\n        self._CurrentSpeed = value\r\n    \r\n    @HorizontalPosition.setter\r\n    def set_HorizontalPosition(self, value):\r\n        self._HorizontalPosition = value\r\n    \r\n    \r\n    # (iv) The method IncreaseSpeed():\r\n    # \u2022 adds IncreaseAmount to the current speed\r\n    # \u2022 adds the updated current speed to the horizontal position.\r\n    # The current speed of a vehicle cannot exceed its maximum speed.\r\n    # Write program code for the method IncreaseSpeed()\r\n    # ---\r\n    def IncreaseSpeed(self):\r\n        if self._CurrentSpeed < self._MaxSpeed:\r\n            self._CurrentSpeed += self._IncreaseAmount\r\n            self._HorizontalPosition += self._CurrentSpeed\r\n            \r\n\r\n# (b) The child class Helicopter inherits from the parent class Vehicle. A helicopter also has a\r\n# vertical position and changes the vertical position when it increases speed.    \r\n# (i) Write program code to declare the class Helicopter. You only need to declare the\r\n# class and its constructor. You do not need to declare the other methods.\r\n# Use your programming language\u2019s appropriate constructor.\r\n# All attributes must be private.\r\n# If you are writing in Python, include attribute declarations using comments.\r\n# ---\r\nclass Helicopter(Vehicle):\r\n    def __init__(self, id, MaxSpeed, IncreaseAmount, VerticalPosition, VerticalChange, MaxHeight):\r\n        super().__init__(id, MaxSpeed, IncreaseAmount)\r\n        self._VerticalPosition = VerticalPosition\r\n        self._VerticalChange = VerticalChange\r\n        self._MaxHeight = MaxHeight\r\n    \r\n    # GetVerticalPosition() getter\r\n    @property\r\n    def VerticalPosition(self):\r\n        return self._VerticalPosition\r\n\r\n    # (ii) The Helicopter method IncreaseSpeed() overrides the method from the parent\r\n    # class and:\r\n    # \u2022 adds the amount of vertical change to the vertical position\r\n    # \u2022 adds IncreaseAmount to the current speed\r\n    # \u2022 adds the updated current speed to the horizontal position.\r\n    # The vertical position of a helicopter cannot exceed its maximum height.\r\n    # The current speed of a helicopter cannot exceed its maximum speed.\r\n    # Write program code for the method IncreaseSpeed()\r\n    # ---\r\n    def IncreaseSpeed(self):\r\n        if self._VerticalPosition < self._MaxHeight:\r\n            self._VerticalPosition += self._VerticalChange\r\n            if self._CurrentSpeed < self._MaxSpeed:\r\n                self._CurrentSpeed += self._IncreaseAmount\r\n                self._HorizontalPosition += self._CurrentSpeed\r\n    \r\n# (c) A procedure needs to output the horizontal position and speed of a vehicle. If the vehicle is a\r\n# helicopter, it also outputs the vertical position.\r\n# All outputs must include appropriate messages.\r\n# Write program code for this procedure.\r\n# ---\r\ndef getSpeedAndPosition(obj):\r\n    if isinstance(obj, Helicopter):\r\n        print(f"(Helicopter)\\n\\tSpeed: {obj.CurrentSpeed}\\n\\tHorizontal Position: {obj.HorizontalPosition}\\n\\tVertical Position: {obj.VerticalPosition}")\r\n    elif isinstance(obj, Vehicle):\r\n        print(f"(Vehicle)\\n\\tSpeed: {obj.CurrentSpeed}\\n\\tHorizontal Position: {obj.HorizontalPosition}")\r\n# # another approach is to use the __repr__ or __str__ dunder methods in the classes. \r\n# This is much for professional and its like production ready code. \r\n# This is the best way to do it. But then, what was even the purpose of writing \r\n# those getters and setters if we are not going to use them. \r\n# So, I settled with this\r\n\r\n\r\n# (d) The main program needs to:\r\n# \u2022 instantiate a car as a new vehicle with the ID "Tiger", a maximum speed of 100 and an\r\n#   increase amount of 20\r\n# \u2022 instantiate a new helicopter with the ID "Lion", a maximum speed of 350, an increase\r\n#   amount of 40, a vertical change of 3 and a maximum height of 100\r\n# \u2022 call IncreaseSpeed() twice for the car and then call the output procedure from\r\n#   part 2(c) for the car\r\n# \u2022 call IncreaseSpeed() twice for the helicopter and then call the output procedure from\r\n#   part 2(c) for the helicopter.\r\n# Write program code for the main program\r\n# ---\r\ndef main():\r\n    car = Vehicle(id="Tiger", MaxSpeed=100, IncreaseAmount=20)\r\n    heli = Helicopter(id="Lion", MaxSpeed=350, IncreaseAmount=40, VerticalChange=3, MaxHeight=100, VerticalPosition=0)\r\n    car.IncreaseSpeed()\r\n    car.IncreaseSpeed()\r\n    heli.IncreaseSpeed()\r\n    heli.IncreaseSpeed()\r\n    getSpeedAndPosition(car)\r\n    getSpeedAndPosition(heli)\r\n\r\nif __name__ == "__main__":\r\n    main()\r\n\r\n# 5+3+3+3+5+4+3+5+1 = 32 total marks\n'})}),"\n",(0,t.jsx)(r.h2,{id:"question-3",children:"Question 3"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'# 3 A program implements two stacks using 1D arrays. One stack stores the names of colours. One\r\n# stack stores the names of animals.\r\n# (a) The program contains the following global arrays and variables:\r\n# \u2022 1D array Animal to store the names of up to 20 animals.\r\n# \u2022 1D array Colour to store the names of up to 10 colours.\r\n# \u2022 AnimalTopPointer to point to the next free space in the array Animal, initialised to 0.\r\n# \u2022 ColourTopPointer to point to the next free space in the array Colour, initialised to 0.\r\n# Write program code to declare the global arrays and variables.\r\n# ---\r\n# PLEASE MAKE SURE TO INITIALIZE THIS\r\nAnimal = [\'\']*20 # to store the names of up to 20 animals\r\nColour = [\'\']*10 # to store the names of up to 10 colours\r\nAnimalTopPointer = 0 # to point to the next free space in the array Animal\r\nColourTopPointer = 0 # to point to the next free space in the array Colour\r\n\r\n\r\n# (b) (i) Study the pseudocode function PushAnimal():\r\n# FUNCTION PushAnimal(DataToPush : STRING) RETURNS BOOLEAN\r\n# IF AnimalTopPointer = 20 THEN\r\n# RETURN FALSE\r\n# ELSE\r\n# Animal[AnimalTopPointer]\r\n#  DataToPush\r\n# AnimalTopPointer\r\n#  AnimalTopPointer + 1\r\n# RETURN TRUE\r\n# ENDIF\r\n# ENDFUNCTION\r\n# Write program code for the function PushAnimal()\r\n# ---\r\ndef PushAnimal(DataToPush: str) -> bool:\r\n    global Animal, AnimalTopPointer\r\n    if AnimalTopPointer == 20:\r\n        return False\r\n    else:\r\n        Animal[AnimalTopPointer] = DataToPush\r\n        AnimalTopPointer += 1\r\n        return True\r\n\r\n\r\n# (ii) Study the pseudocode function PopAnimal():\r\n# FUNCTION PopAnimal() RETURNS STRING\r\n# DECLARE ReturnData : STRING\r\n# IF AnimalTopPointer = 0 THEN\r\n# RETURN ""\r\n# ELSE\r\n# ReturnData\r\n#  Animal[AnimalTopPointer - 1]\r\n# AnimalTopPointer\r\n#  AnimalTopPointer - 1\r\n# RETURN ReturnData\r\n# ENDIF\r\n# ENDFUNCTION\r\n# Write program code to declare the function PopAnimal()\r\n# ---\r\ndef PopAnimal() -> str:\r\n    global Animal, AnimalTopPointer\r\n    ReturnData = ""\r\n    if AnimalTopPointer == 0:\r\n        return ""\r\n    else:\r\n        ReturnData = Animal[AnimalTopPointer - 1]\r\n        AnimalTopPointer -= 1\r\n        return ReturnData\r\n\r\n\r\n# (iii) The procedure ReadData():\r\n# \u2022 reads the animal names from the file AnimalData.txt\r\n# \u2022 uses PushAnimal() to insert each name onto the stack\r\n# \u2022 uses appropriate exception handling if the file does not exist.\r\n# Write program code for the procedure ReadData()\r\n# ---\r\ndef ReadData():\r\n    try:\r\n        # import os # not the best practice to import it here, but works.\r\n        # if not os.path.isfile(os.getcwd(), "AnimalData.txt"):\r\n            # raise FileNotFoundError\r\n        with open("AnimalData.txt", "r", encoding="utf-8") as _file:\r\n            for animal in _file.readlines():\r\n                PushAnimal(animal.strip())\r\n    except FileNotFoundError:\r\n        print("AnimalData.txt Not Found")\r\n    except Exception as e:\r\n        print(f"An error occured: {e}")\r\n    \r\n    # (v) Amend the procedure ReadData() so that it also:\r\n    # \u2022 reads the colours from the text file ColourData.txt\r\n    # \u2022 uses PushColour() to insert each colour onto the stack\r\n    # \u2022 uses appropriate exception handling if the file does not exist.\r\n    # ---\r\n    try:\r\n        # import os # not the best practice to import it here, but works.\r\n        # if not os.path.isfile(os.getcwd(), "ColourData.txt"):\r\n            # raise FileNotFoundError\r\n        with open("ColourData.txt", "r", encoding="utf-8") as _file:\r\n            for colour in _file.readlines():\r\n                PushColour(colour.strip())\r\n    except FileNotFoundError:\r\n        print("ColourData.txt Not Found")\r\n    except Exception as e:\r\n        print(f"An error occured: {e}")\r\n    \r\n\r\n# (iv) The function PushColour() performs the same actions as PushAnimal() but inserts\r\n# an item into Colour.\r\n# The function PopColour() performs the same actions as PopAnimal() but removes\r\n# the next item from Colour.\r\n# Write program code for the functions PushColour() and PopColour()\r\n# ---\r\ndef PushColour(DataToPush: str) -> bool:\r\n    global Colour, ColourTopPointer\r\n    if ColourTopPointer == 10: # only 10 elements\r\n        return False\r\n    else:\r\n        Colour[ColourTopPointer] = DataToPush\r\n        ColourTopPointer += 1\r\n        return True\r\n\r\ndef PopColour() -> str:\r\n    global Colour, ColourTopPointer\r\n    ReturnData = ""\r\n    if ColourTopPointer == 0:\r\n        return ""\r\n    else:\r\n        ReturnData = Colour[ColourTopPointer - 1]\r\n        ColourTopPointer -= 1\r\n        return ReturnData\r\n\r\n\r\n# (c) The procedure OutputItem():\r\n#   \u2022 pops the next item from both Animal and Colour\r\n#   \u2022 outputs the colour and animal on one line, for example "black horse"\r\n# If there is no data in Colour:\r\n#   \u2022 the animal is pushed back onto Animal\r\n#   \u2022 "No colour" is output.\r\n# If there is no data in Animal:\r\n#   \u2022 the colour is pushed back onto Colour\r\n#   \u2022 "No animal" is output.\r\n# Write program code for the procedure OutputItem()\r\n# ---\r\ndef OutputItem():\r\n    panimal = PopAnimal()\r\n    pcolour = PopColour()\r\n    if pcolour == "":       # should work because we used .strip() when pushing, it also removed the empty lines\r\n        PushAnimal(panimal)\r\n        print("No colour")\r\n    elif panimal == "":\r\n        PushColour(pcolour)\r\n        print("No Animal")\r\n    else:\r\n        print(f"{pcolour} {panimal}")\r\n\r\n\r\n# (d) The main program:\r\n# \u2022 calls the procedure ReadData()\r\n# \u2022 calls OutputItem() four times.\r\n# (i) Write program code for the main program.\r\n# ---\r\ndef main():\r\n    ReadData()\r\n    OutputItem() # 1st time\r\n    OutputItem() # 2nd time\r\n    OutputItem() # 3rd time\r\n    OutputItem() # 4th time\r\n\r\nif __name__ == "__main__":\r\n    main()\r\n\r\n# 3+3+3+5+2+2+5+1+1+1 = 26 total marks\n'})})]})}function p(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},271:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/files/evidence-d4b49da981c4f2fe6e7901863fd762ea.doc"},7736:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/files/9618_s23_qp_41-abd6d3d069cdda990206e78147a37229.pdf"},9059:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/files/9618_s23_sf_41-8a2bcc8b0be20aacc9f1845be97afef2.zip"},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>s});var t=n(6540);const o={},a=t.createContext(o);function i(e){const r=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);