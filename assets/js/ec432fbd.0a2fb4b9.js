"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[182],{6626:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var i=n(4848),t=n(8453);const o={title:"9618_w23_qp_41 (2023 Nov 41)",sidebar_label:"9618_w23_qp_41"},a=void 0,s={id:"w23_qp_41/index",title:"9618_w23_qp_41 (2023 Nov 41)",description:"Resources:",source:"@site/docs/9618_w23_qp_41/index.md",sourceDirName:"9618_w23_qp_41",slug:"/w23_qp_41/",permalink:"/Cambridge-A-Level-Computer-Science-9618-4/docs/w23_qp_41/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"9618_w23_qp_41 (2023 Nov 41)",sidebar_label:"9618_w23_qp_41"},sidebar:"tutorialSidebar",previous:{title:"9618_w22_qp_42",permalink:"/Cambridge-A-Level-Computer-Science-9618-4/docs/w22_qp_42/"},next:{title:"9618_w23_qp_42",permalink:"/Cambridge-A-Level-Computer-Science-9618-4/docs/w23_qp_42/"}},l={},d=[{value:"Question 1",id:"question-1",level:2},{value:"Question 2",id:"question-2",level:2},{value:"My Answer",id:"my-answer",level:3},{value:"Marking Scheme",id:"marking-scheme",level:3},{value:"Question 3",id:"question-3",level:2}];function c(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",pre:"pre",ul:"ul",...(0,t.R)(),...e.components},{Details:o}=r;return o||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(o,{children:[(0,i.jsx)("summary",{children:"Resources:"}),(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(6832).A+"",children:"Question Paper"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(4779).A+"",children:"Exam Resources"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsxs)(r.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(9991).A+"",children:["My Answers ",(0,i.jsx)(r.code,{children:"(evidence.doc)"})]})}),"\n"]})]}),"\n",(0,i.jsx)(r.h2,{id:"question-1",children:"Question 1"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:'# a) i)\r\ndef IterativeVowels(Value):\r\n    # Value string\r\n    # IterateVowels() returns integer\r\n    Total = 0\r\n    for x in range(0, len(Value)):\r\n        FirstCharacter = Value[0].lower()\r\n        if FirstCharacter in ["a", "e", "i", "o", "u"]:\r\n            Total += 1\r\n        Value = Value[1:len(Value)]\r\n    return Total\r\n\r\n# a) ii)\r\nprint(IterativeVowels("house"))\r\n\r\n# b) i)\r\ndef RecursiveVowels(Value):\r\n    if len(Value) == 0:\r\n        return 0\r\n    else:\r\n        fch = Value[0]\r\n    if fch in ["a", "e", "i", "o", "u"]:\r\n        return 1 + RecursiveVowels(Value[1:len(Value)])\r\n    else:\r\n        return RecursiveVowels(Value[1:len(Value)])\r\n    \r\n# b) ii\r\nprint(RecursiveVowels("imagine"))\n'})}),"\n",(0,i.jsx)(r.h2,{id:"question-2",children:"Question 2"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"I have so many doubts about this. Not even the code given in the marking scheme provides the output given in the marking scheme itself."}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"my-answer",children:"My Answer"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:'# a) i)\r\nQueue = []  # 50 ineteger\r\nHeadPointer = -1  # integer\r\nTailPointer = 0  # integer\r\n\r\n\r\n# a) ii)\r\ndef Enqueue(value):\r\n    global Queue, HeadPointer, TailPointer\r\n    if TailPointer == 50:\r\n        print("Queue is full")\r\n    else:\r\n        Queue.append(value)\r\n        TailPointer += 1\r\n        if HeadPointer == -1:\r\n            HeadPointer = 0\r\n\r\n\r\n# a) iii)\r\ndef Dequeue():\r\n    global Queue, HeadPointer, TailPointer\r\n    if (HeadPointer == -1) or (HeadPointer == TailPointer):\r\n        print("Empty Queue")\r\n        return "Empty"\r\n    else:\r\n        HeadPointer += 1\r\n        return Queue[HeadPointer - 1]\r\n\r\n\r\n# b)\r\ndef ReadData():\r\n    try:\r\n        with open("QueueData.txt", "r", encoding="utf-8") as file:\r\n            for line in file.readlines():\r\n                Enqueue(value=line.strip())\r\n    except IOError:\r\n        print("File not found")\r\n    except Exception as e:\r\n        print(f"Another error occured: {e}")\r\n\r\n\r\n# c) i)\r\nclass RecordData:\r\n    # self.ID string\r\n    # self.Total integer\r\n    def __init__(self, ID=None, Total=None):\r\n        self.ID = ID\r\n        self.Total = Total\r\n\r\n\r\n# c) ii\r\nRecords = []  # 50 elements of type RecordData\r\n# Records = [RecordData(ID=None, Total=None)] * 50  # 50 elements of type RecordData\r\nNumberRecords = 0  # integer\r\n\r\n\r\n# c) iii)\r\ndef TotalData():\r\n    global NumberRecords, Records\r\n\r\n    Flag = False\r\n    DataAccessed = Dequeue()\r\n\r\n    if NumberRecords == 0:\r\n        Records.append(RecordData(ID=DataAccessed, Total=1))\r\n        Flag = True\r\n        NumberRecords += 1\r\n    else:\r\n        for x in range(0, NumberRecords):\r\n            if Records[x].ID == DataAccessed:\r\n                Records[x].Total += 1\r\n                Flag = True\r\n        if Flag is False:\r\n            Records.append(RecordData(ID=DataAccessed, Total=1))\r\n            NumberRecords += 1\r\n\r\n\r\ndef OutputRecords():\r\n    already_printed = []\r\n    for x in range(0, NumberRecords):\r\n        record = Records[x]\r\n        if not ((record.ID == "") or (record.Total == 0)):\r\n            if not (record.ID in already_printed):\r\n                print(f"ID {record.ID} Total {record.Total}")\r\n                already_printed.append(record.ID)\r\n    print(already_printed)\r\n\r\n\r\nReadData()\r\n# PLEASE REMEMBER THIS PART! PLEASE!!!\r\nwhile HeadPointer != TailPointer:\r\n    TotalData()\r\n    OutputRecords()\r\n\n'})}),"\n",(0,i.jsx)(r.h3,{id:"marking-scheme",children:"Marking Scheme"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:'# a) i)\r\n# main\r\nQueue = []  # string 50 elements\r\nHeadPointer = -1\r\nTailPointer = 0\r\n\r\n\r\ndef Enqueue(Data):\r\n    global TailPointer\r\n    global HeadPointer\r\n    global Queue\r\n    if TailPointer == 50:\r\n        print("Queue full")\r\n    else:\r\n        Queue.append(Data)\r\n        TailPointer += 1\r\n        if HeadPointer == -1:\r\n            HeadPointer = 0\r\n\r\n\r\n# a) iii)\r\ndef Dequeue():\r\n    global Queue\r\n    global HeadPointer\r\n    if HeadPointer == -1 or HeadPointer == TailPointer:\r\n        print("Queue empty")\r\n        return "Empty"\r\n    else:\r\n        HeadPointer += 1\r\n        return Queue[HeadPointer - 1]\r\n\r\n\r\n# b)\r\ndef ReadData():\r\n    try:\r\n        DataFile = open("QueueData.txt")\r\n        for Line in DataFile:\r\n            Enqueue(Line.strip())\r\n        DataFile.close()\r\n    except IOError:\r\n        print("No file")\r\n\r\n\r\n# c) i)\r\nclass RecordData:\r\n    # self.ID string\r\n    # self.Total integer\r\n    def __init__(self, ID, Total):\r\n        self.__ID = ID\r\n        self.__Total = Total\r\n\r\n    def SetID(self, Value):\r\n        self.__ID = Value\r\n\r\n    def GetID(self):\r\n        return self.__ID\r\n\r\n    def SetTotal(self, Value):\r\n        self.__Total = Value\r\n\r\n    def GetTotal(self):\r\n        return self.__Total\r\n\r\n\r\n# c) ii\r\nRecords = []  # 50 elements of type RecordData\r\nNumberRecords = 0  # integer\r\n\r\n\r\n# c) iii)\r\ndef TotalData():\r\n    global NumberRecords\r\n    global Records\r\n    Flag = False\r\n    DataAccessed = Dequeue()\r\n    if NumberRecords == 0:\r\n        Records.append(RecordData(DataAccessed, 1))\r\n        NumberRecords += 1\r\n        Flag = True\r\n    else:\r\n        for X in range(0, NumberRecords):\r\n            if Records[X].GetID() == DataAccessed:\r\n                Records[X].SetTotal(Records[X].GetTotal() + 1)\r\n                Flag = True\r\n    if Flag == False:\r\n        Records.append(RecordData(DataAccessed, 1))\r\n        NumberRecords += 1\r\n\r\n\r\n# d)\r\ndef OutputRecords():\r\n    for X in range(0, NumberRecords):\r\n        print("ID", Records[X].GetID(), " Total ", Records[X].GetTotal())\r\n\r\n\r\n# e) i\r\nRecords = []\r\nHeadPointer = 0\r\nTailPointer = 0\r\nReadData()\r\nNumberRecords = 0\r\nwhile HeadPointer != TailPointer:\r\n    TotalData()\r\n    OutputRecords()\r\n\n'})}),"\n",(0,i.jsx)(r.h2,{id:"question-3",children:"Question 3"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:'import typing\r\n\r\n\r\n# a) i)\r\nclass Character:\r\n    # self.__Name string\r\n    # self.__XPosition integer\r\n    # self.__YPosition integer\r\n\r\n    def __init__(self, Name: str, XPosition: int, YPosition: int) -> None:\r\n        self.__Name: str = Name\r\n        self.__XPosition: int = XPosition\r\n        self.__YPosition: int = YPosition\r\n\r\n    def __repr__(self):\r\n        return f"<Character Name={self.__Name} XPosition={self.__XPosition} YPosition={self.__YPosition}>"\r\n\r\n    # a) ii)\r\n    def GetName(self) -> str:\r\n        return self.__Name\r\n\r\n    def GetXPosition(self) -> int:\r\n        return self.__XPosition\r\n\r\n    def GetYPosition(self) -> int:\r\n        return self.__YPosition\r\n\r\n    # a) iii)\r\n    def SetXPosition(self, value: int) -> None:\r\n        self.__XPosition += value\r\n        if self.__XPosition > 10_000:\r\n            self.__XPosition = 10_000\r\n        if self.__XPosition < 0:\r\n            self.__XPosition = 0\r\n\r\n    def SetYPosition(self, value: int) -> None:\r\n        self.__YPosition += value\r\n        if self.__YPosition > 10_000:\r\n            self.__YPosition = 10_000\r\n        if self.__YPosition < 0:\r\n            self.__YPosition = 0\r\n\r\n    # a) iv)\r\n    def Move(self, direction: typing.Literal["up", "down", "left", "right"]) -> None:\r\n        if direction == "up":\r\n            self.SetYPosition(10)\r\n        elif direction == "down":\r\n            self.SetYPosition(-10)\r\n        elif direction == "left":\r\n            self.SetXPosition(-10)\r\n        elif direction == "right":\r\n            self.SetXPosition(10)\r\n\r\n\r\n# b)\r\nJack = Character(Name="Jack", XPosition=50, YPosition=50)\r\n\r\n\r\n# c) i)\r\nclass BikeCharacter(Character):\r\n    def __init__(self, Name: str, XPosition: int, YPosition: int) -> None:\r\n        super().__init__(Name=Name, XPosition=XPosition, YPosition=YPosition)\r\n\r\n    def __repr__(self):\r\n        return f"<BikeCharacter Name={self.__Name} XPosition={self.__XPosition} YPosition={self.__YPosition}>"\r\n\r\n    # c) ii)\r\n    def Move(self, direction: typing.Literal["up", "down", "left", "right"]) -> None:\r\n        if direction == "up":\r\n            self.SetYPosition(20)\r\n        elif direction == "down":\r\n            self.SetYPosition(-20)\r\n        elif direction == "left":\r\n            self.SetXPosition(-20)\r\n        elif direction == "right":\r\n            self.SetXPosition(20)\r\n\r\n\r\n# d)\r\nKarla = BikeCharacter(Name="Karla", XPosition=100, YPosition=50)\r\n\r\n\r\n# e) i)\r\n\r\nperson: typing.Union[Character, BikeCharacter]\r\n\r\nwhile True:\r\n    move_character = (\r\n        input("[?] Which character do you want to move [jack/karla]: ").strip().lower()\r\n    )\r\n    if move_character == "jack":\r\n        person = Jack\r\n        break\r\n    elif move_character == "karla":\r\n        person = Karla\r\n        break\r\n    else:\r\n        print("Please enter a valid input!")\r\n\r\nwhile True:\r\n    what_direction = (\r\n        input("[?] What direction do you want to move [up/down/left/right]: ")\r\n        .strip()\r\n        .lower()\r\n    )\r\n    if what_direction in ("up", "down", "left", "right"):\r\n        break\r\n\r\nperson.Move(what_direction)\r\nprint(\r\n    f"{person.GetName()}\'s new position is X = {person.GetXPosition()} Y = {person.GetYPosition()}"\r\n)\r\n\n'})})]})}function u(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},6832:(e,r,n)=>{n.d(r,{A:()=>i});const i=n.p+"assets/files/9618_w23_qp_41-7a9ed6a604a3d6b1927b1adea5d26363.pdf"},4779:(e,r,n)=>{n.d(r,{A:()=>i});const i=n.p+"assets/files/9618_w23_sf_41-fd3bacd375dfda04d979a869a967df72.zip"},9991:(e,r,n)=>{n.d(r,{A:()=>i});const i=n.p+"assets/files/evidence-33763b46c518efc95569b839f5987af9.doc"},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>s});var i=n(6540);const t={},o=i.createContext(t);function a(e){const r=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(o.Provider,{value:r},e.children)}}}]);