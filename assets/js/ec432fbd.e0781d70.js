"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[182],{6626:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var t=i(4848),o=i(8453);const r={title:"9618_w23_qp_41 (2023 Nov 41)",sidebar_label:"9618_w23_qp_41"},a=void 0,s={id:"w23_qp_41/index",title:"9618_w23_qp_41 (2023 Nov 41)",description:"Resources:",source:"@site/docs/9618_w23_qp_41/index.md",sourceDirName:"9618_w23_qp_41",slug:"/w23_qp_41/",permalink:"/docs/w23_qp_41/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"9618_w23_qp_41 (2023 Nov 41)",sidebar_label:"9618_w23_qp_41"},sidebar:"tutorialSidebar",previous:{title:"9618_w22_qp_42",permalink:"/docs/w22_qp_42/"},next:{title:"9618_w23_qp_42",permalink:"/docs/w23_qp_42/"}},l={},d=[{value:"Question 1",id:"question-1",level:2},{value:"Question 2",id:"question-2",level:2},{value:"My Answer",id:"my-answer",level:3},{value:"Marking Scheme",id:"marking-scheme",level:3},{value:"Question 3",id:"question-3",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",pre:"pre",ul:"ul",...(0,o.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Resources:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:i(6832).A+"",children:"Question Paper"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:i(4779).A+"",children:"Exam Resources"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:i(9991).A+"",children:["My Answers ",(0,t.jsx)(n.code,{children:"(evidence.doc)"})]})}),"\n"]})]}),"\n",(0,t.jsx)(n.h2,{id:"question-1",children:"Question 1"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# a) i)\ndef IterativeVowels(Value):\n    # Value string\n    # IterateVowels() returns integer\n    Total = 0\n    for x in range(0, len(Value)):\n        FirstCharacter = Value[0].lower()\n        if FirstCharacter in ["a", "e", "i", "o", "u"]:\n            Total += 1\n        Value = Value[1:len(Value)]\n    return Total\n\n# a) ii)\nprint(IterativeVowels("house"))\n\n# b) i)\ndef RecursiveVowels(Value):\n    if len(Value) == 0:\n        return 0\n    else:\n        fch = Value[0]\n    if fch in ["a", "e", "i", "o", "u"]:\n        return 1 + RecursiveVowels(Value[1:len(Value)])\n    else:\n        return RecursiveVowels(Value[1:len(Value)])\n    \n# b) ii\nprint(RecursiveVowels("imagine"))\n'})}),"\n",(0,t.jsx)(n.h2,{id:"question-2",children:"Question 2"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"I have so many doubts about this. Not even the code given in the marking scheme provides the output given in the marking scheme itself."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"my-answer",children:"My Answer"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# a) i)\nQueue = []  # 50 ineteger\nHeadPointer = -1  # integer\nTailPointer = 0  # integer\n\n\n# a) ii)\ndef Enqueue(value):\n    global Queue, HeadPointer, TailPointer\n    if TailPointer == 50:\n        print("Queue is full")\n    else:\n        Queue.append(value)\n        TailPointer += 1\n        if HeadPointer == -1:\n            HeadPointer = 0\n\n\n# a) iii)\ndef Dequeue():\n    global Queue, HeadPointer, TailPointer\n    if (HeadPointer == -1) or (HeadPointer == TailPointer):\n        print("Empty Queue")\n        return "Empty"\n    else:\n        HeadPointer += 1\n        return Queue[HeadPointer - 1]\n\n\n# b)\ndef ReadData():\n    try:\n        with open("QueueData.txt", "r", encoding="utf-8") as file:\n            for line in file.readlines():\n                Enqueue(value=line.strip())\n    except IOError:\n        print("File not found")\n    except Exception as e:\n        print(f"Another error occured: {e}")\n\n\n# c) i)\nclass RecordData:\n    # self.ID string\n    # self.Total integer\n    def __init__(self, ID=None, Total=None):\n        self.ID = ID\n        self.Total = Total\n\n\n# c) ii\nRecords = []  # 50 elements of type RecordData\n# Records = [RecordData(ID=None, Total=None)] * 50  # 50 elements of type RecordData\nNumberRecords = 0  # integer\n\n\n# c) iii)\ndef TotalData():\n    global NumberRecords, Records\n\n    Flag = False\n    DataAccessed = Dequeue()\n\n    if NumberRecords == 0:\n        Records.append(RecordData(ID=DataAccessed, Total=1))\n        Flag = True\n        NumberRecords += 1\n    else:\n        for x in range(0, NumberRecords):\n            if Records[x].ID == DataAccessed:\n                Records[x].Total += 1\n                Flag = True\n        if Flag is False:\n            Records.append(RecordData(ID=DataAccessed, Total=1))\n            NumberRecords += 1\n\n\ndef OutputRecords():\n    already_printed = []\n    for x in range(0, NumberRecords):\n        record = Records[x]\n        if not ((record.ID == "") or (record.Total == 0)):\n            if not (record.ID in already_printed):\n                print(f"ID {record.ID} Total {record.Total}")\n                already_printed.append(record.ID)\n    print(already_printed)\n\n\nReadData()\n# PLEASE REMEMBER THIS PART! PLEASE!!!\nwhile HeadPointer != TailPointer:\n    TotalData()\n    OutputRecords()\n\n'})}),"\n",(0,t.jsx)(n.h3,{id:"marking-scheme",children:"Marking Scheme"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# a) i)\n# main\nQueue = []  # string 50 elements\nHeadPointer = -1\nTailPointer = 0\n\n\ndef Enqueue(Data):\n    global TailPointer\n    global HeadPointer\n    global Queue\n    if TailPointer == 50:\n        print("Queue full")\n    else:\n        Queue.append(Data)\n        TailPointer += 1\n        if HeadPointer == -1:\n            HeadPointer = 0\n\n\n# a) iii)\ndef Dequeue():\n    global Queue\n    global HeadPointer\n    if HeadPointer == -1 or HeadPointer == TailPointer:\n        print("Queue empty")\n        return "Empty"\n    else:\n        HeadPointer += 1\n        return Queue[HeadPointer - 1]\n\n\n# b)\ndef ReadData():\n    try:\n        DataFile = open("QueueData.txt")\n        for Line in DataFile:\n            Enqueue(Line.strip())\n        DataFile.close()\n    except IOError:\n        print("No file")\n\n\n# c) i)\nclass RecordData:\n    # self.ID string\n    # self.Total integer\n    def __init__(self, ID, Total):\n        self.__ID = ID\n        self.__Total = Total\n\n    def SetID(self, Value):\n        self.__ID = Value\n\n    def GetID(self):\n        return self.__ID\n\n    def SetTotal(self, Value):\n        self.__Total = Value\n\n    def GetTotal(self):\n        return self.__Total\n\n\n# c) ii\nRecords = []  # 50 elements of type RecordData\nNumberRecords = 0  # integer\n\n\n# c) iii)\ndef TotalData():\n    global NumberRecords\n    global Records\n    Flag = False\n    DataAccessed = Dequeue()\n    if NumberRecords == 0:\n        Records.append(RecordData(DataAccessed, 1))\n        NumberRecords += 1\n        Flag = True\n    else:\n        for X in range(0, NumberRecords):\n            if Records[X].GetID() == DataAccessed:\n                Records[X].SetTotal(Records[X].GetTotal() + 1)\n                Flag = True\n    if Flag == False:\n        Records.append(RecordData(DataAccessed, 1))\n        NumberRecords += 1\n\n\n# d)\ndef OutputRecords():\n    for X in range(0, NumberRecords):\n        print("ID", Records[X].GetID(), " Total ", Records[X].GetTotal())\n\n\n# e) i\nRecords = []\nHeadPointer = 0\nTailPointer = 0\nReadData()\nNumberRecords = 0\nwhile HeadPointer != TailPointer:\n    TotalData()\n    OutputRecords()\n\n'})}),"\n",(0,t.jsx)(n.h2,{id:"question-3",children:"Question 3"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import typing\n\n\n# a) i)\nclass Character:\n    # self.__Name string\n    # self.__XPosition integer\n    # self.__YPosition integer\n\n    def __init__(self, Name: str, XPosition: int, YPosition: int) -> None:\n        self.__Name: str = Name\n        self.__XPosition: int = XPosition\n        self.__YPosition: int = YPosition\n\n    def __repr__(self):\n        return f"<Character Name={self.__Name} XPosition={self.__XPosition} YPosition={self.__YPosition}>"\n\n    # a) ii)\n    def GetName(self) -> str:\n        return self.__Name\n\n    def GetXPosition(self) -> int:\n        return self.__XPosition\n\n    def GetYPosition(self) -> int:\n        return self.__YPosition\n\n    # a) iii)\n    def SetXPosition(self, value: int) -> None:\n        self.__XPosition += value\n        if self.__XPosition > 10_000:\n            self.__XPosition = 10_000\n        if self.__XPosition < 0:\n            self.__XPosition = 0\n\n    def SetYPosition(self, value: int) -> None:\n        self.__YPosition += value\n        if self.__YPosition > 10_000:\n            self.__YPosition = 10_000\n        if self.__YPosition < 0:\n            self.__YPosition = 0\n\n    # a) iv)\n    def Move(self, direction: typing.Literal["up", "down", "left", "right"]) -> None:\n        if direction == "up":\n            self.SetYPosition(10)\n        elif direction == "down":\n            self.SetYPosition(-10)\n        elif direction == "left":\n            self.SetXPosition(-10)\n        elif direction == "right":\n            self.SetXPosition(10)\n\n\n# b)\nJack = Character(Name="Jack", XPosition=50, YPosition=50)\n\n\n# c) i)\nclass BikeCharacter(Character):\n    def __init__(self, Name: str, XPosition: int, YPosition: int) -> None:\n        super().__init__(Name=Name, XPosition=XPosition, YPosition=YPosition)\n\n    def __repr__(self):\n        return f"<BikeCharacter Name={self.__Name} XPosition={self.__XPosition} YPosition={self.__YPosition}>"\n\n    # c) ii)\n    def Move(self, direction: typing.Literal["up", "down", "left", "right"]) -> None:\n        if direction == "up":\n            self.SetYPosition(20)\n        elif direction == "down":\n            self.SetYPosition(-20)\n        elif direction == "left":\n            self.SetXPosition(-20)\n        elif direction == "right":\n            self.SetXPosition(20)\n\n\n# d)\nKarla = BikeCharacter(Name="Karla", XPosition=100, YPosition=50)\n\n\n# e) i)\n\nperson: typing.Union[Character, BikeCharacter]\n\nwhile True:\n    move_character = (\n        input("[?] Which character do you want to move [jack/karla]: ").strip().lower()\n    )\n    if move_character == "jack":\n        person = Jack\n        break\n    elif move_character == "karla":\n        person = Karla\n        break\n    else:\n        print("Please enter a valid input!")\n\nwhile True:\n    what_direction = (\n        input("[?] What direction do you want to move [up/down/left/right]: ")\n        .strip()\n        .lower()\n    )\n    if what_direction in ("up", "down", "left", "right"):\n        break\n\nperson.Move(what_direction)\nprint(\n    f"{person.GetName()}\'s new position is X = {person.GetXPosition()} Y = {person.GetYPosition()}"\n)\n\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},6832:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/files/9618_w23_qp_41-7a9ed6a604a3d6b1927b1adea5d26363.pdf"},4779:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/files/9618_w23_sf_41-fd3bacd375dfda04d979a869a967df72.zip"},9991:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/files/evidence-33763b46c518efc95569b839f5987af9.doc"},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>s});var t=i(6540);const o={},r=t.createContext(o);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);